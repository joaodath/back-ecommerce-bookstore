// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  username        String            @unique
  email           String            @unique
  password        String
  profilePhoto    String?
  birthDate       DateTime
  cpf             String            @unique
  cep             String?
  country         String?
  state           String?
  city            String?
  address         String?
  phonenumber     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  booksBought     Books[]
  shoppingCart    ShoppingCart[]
  shoppingHistory ShoppingHistory[]
  active          Boolean           @default(true)
  deleted         Boolean           @default(false)
  wishList        WishList[]
}

model ShoppingCart {
  id                Int                 @id @default(autoincrement())
  user              User[]              @relation(fields: [userId], references: [id])
  userId            Int?
  shoppingCartItems ShoppingCartItems[]
  couponCode        CouponCodes[]       @relation(fields: [couponCodeId], references: [code])
  couponCodeId      String?
  discountAmount    Float
  shippingPrice     Float
  totalPrice        Float
}

model ShoppingCartItems {
  id             Int            @id @default(autoincrement())
  shoppingCart   ShoppingCart[] @relation(fields: [shoppingCartId], references: [id])
  shoppingCartId Int?
  book           Books[]        @relation(fields: [bookId], references: [id])
  bookId         Int?
  price          Float
}

model CouponCodes {
  code            String            @id @unique
  shoppingCart    ShoppingCart[]
  shoppingHistory ShoppingHistory[]
  discountAmount  Float
  validUntil      DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  useLimit        Int
  useCount        Int
}

model Books {
  id                   Int                   @id @default(autoincrement())
  title                String
  author               Authors[]
  publisher            Publisher[]
  category             Category[]
  language             String
  edition              Int
  description          String                @db.VarChar(1000)
  coverImg             String
  ebook                Boolean               @default(true)
  hardCover            Boolean               @default(false)
  height               Int                   @default(0)
  width                Int                   @default(0)
  length               Int                   @default(0)
  weight               Int                   @default(0)
  isbn13               Int                   @unique @default(0)
  isbn10               Int                   @unique @default(0)
  score                Float                 @default(0)
  price                Float
  discountedPrice      Float?
  discountCheck        Boolean               @default(false)
  inventoryAmount      Int                   @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  shoppingHistoryItems ShoppingHistoryItem[]
  shoppingCartItems    ShoppingCartItems[]
  user                 User[]
  wishList             WishList[]
}

model Authors {
  id    Int     @id @default(autoincrement())
  name  String
  books Books[]
}

model Publisher {
  id    Int     @id @default(autoincrement())
  name  String
  books Books[]
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  books Books[]
}

model ShoppingHistory {
  id             Int                   @id @default(autoincrement())
  user           User[]                @relation(fields: [userId], references: [id])
  userId         Int?
  items          ShoppingHistoryItem[]
  totalPrice     Float
  couponCode     CouponCodes[]         @relation(fields: [couponCodeId], references: [code])
  couponCodeId   String?
  couponCodeStr  String?
  discountAmount Float
  shippingPrice  Float
  createdAt      DateTime              @default(now())
}

model ShoppingHistoryItem {
  id                Int               @id @default(autoincrement())
  books             Books[]           @relation(fields: [bookId], references: [id])
  bookId            Int?
  bookPrice         Float
  createdAt         DateTime          @default(now())
  shoppingHistory   ShoppingHistory[] @relation(fields: [shoppingHistoryId], references: [id])
  shoppingHistoryId Int?
}

model WishList {
  id     Int     @id @default(autoincrement())
  user   User[]  @relation(fields: [userId], references: [id])
  userId Int?
  name   String
  books  Books[]
}
